## we do not (need to) redefine the tintColor at every level, it will be dispatched to the right type

## no point in having p/invoke calls that can be implement with a type cast (byte vs nint)
!missing-pinvoke! NSTextAlignmentFromCTTextAlignment is not bound
!missing-pinvoke! NSTextAlignmentToCTTextAlignment is not bound

## this was (pre iOS10) a required member that was deprecated and made optional

## https://bugzilla.xamarin.com/show_bug.cgi?id=43788

## internal (xamarin) type

## typedef is used (no value) in UITextInput.h: typedef NSInteger UITextDirection

## Implemented in managed code
!missing-selector! UIColor::getHue:saturation:brightness:alpha: not bound
!missing-selector! UIColor::getRed:green:blue:alpha: not bound

## Not implemented (ctor signature conflict) but there's a static method available that does the job
!missing-selector! UIColor::initWithHue:saturation:brightness:alpha: not bound

## Not bound intentionally, Factory method FromDisplayP3 is available and adding this as a ctor would make the api usage ugly since signature matches colorWithRed:green:blue:alpha:
!missing-selector! UIColor::initWithDisplayP3Red:green:blue:alpha: not bound

## defined with __Internal (which is normally ignored here) so 3rd party tools can hack it

## static method cannot be overriden "normally" they must be re-exposed with [Export]

## Apple docs: This property is inherited from the UIView parent class. This class changes the default value of this property to NO.

## it's technically optional but there's no point in adopting the protocol if you do not provide the implemenation

## fixed in .NET - API break

## the [Sealed] attributes removes the [Export] one so it seems missing (but it's not)

## UIAccessibilityContainer is an informal protocol 
## that we bound as a protocol but is (objc encoding) a category

## might not be usable unless our ToString output is parsable as an input (includes locale issues)
!missing-pinvoke! CGAffineTransformFromString is not bound
!missing-pinvoke! CGPointFromString is not bound
!missing-pinvoke! CGRectFromString is not bound
!missing-pinvoke! CGSizeFromString is not bound
!missing-pinvoke! NSStringFromCGAffineTransform is not bound
!missing-pinvoke! NSStringFromCGPoint is not bound
!missing-pinvoke! NSStringFromCGRect is not bound
!missing-pinvoke! NSStringFromCGSize is not bound
!missing-pinvoke! NSStringFromUIOffset is not bound
!missing-pinvoke! UIOffsetFromString is not bound

## HACK: those members are not *required* in ObjC but we made them abstract to have them inlined in UITextField and UITextView
## Even more confusing it that respondToSelecttor return NO on them even if it works in _real_ life (compare unit and introspection tests)

## UIAccessibility
## We can't expose them as categories of NSObject so we have custom types instead

## @required members added to exixting interfaces (breaking change), fixed on .NET

# Apple renamed it from UILineBreakMode and we kept the old name for API compatibility
!missing-enum! NSLineBreakMode not bound

# Apple renamed it from UITextAlignment and we kept the old name for API compatibility
!missing-enum! NSTextAlignment not bound

## It got renamed from UITextWritingDirection to NSWritingDirection but it is a breaking change
## Fixed in .NET

## macro is used in UIBarCommon.h: #define UIToolbarPosition UIBarPosition

## there's no UI_APPEARANCE_SELECTOR in headers - but they can (unofficially) work, YYMV

## manually bound (better, stronger signature) on `[setS|s]copeBarButtonTitleTextAttributes:forState:` which is decorated with `UI_APPEARANCE_SELECTOR`

## [Wrap] over `[largeT|t]itleTextAttributes` which is decorated with `UI_APPEARANCE_SELECTOR`
