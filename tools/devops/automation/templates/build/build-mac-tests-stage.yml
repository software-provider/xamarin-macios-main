# template that contains all the different steps to create a pkgs, publish the results and provide feedback to the
# developers in github.
parameters:
- name: vsdropsPrefix
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

- name: pool
  type: string
  default: automatic

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: xcodeChannel
  type: string

- name: macOSName
  type: string

jobs:
- job: configure
  displayName: 'Configure build'
  pool:
    vmImage: windows-latest

  variables:
    isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]

  steps:
  - template: ../common/configure.yml
    parameters:
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}
      uploadArtifacts: true
      enableDotnet: ${{ parameters.enableDotnet }}

- ${{ if eq(parameters.pool, 'automatic') }}:
  - job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
    pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
      vmImage: ubuntu-latest
    steps:
    - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

    # Selects appropriate agent pool based on trigger type (PR or CI); manually triggered builds target the PR pool
    - template: azure-devops-pools/agent-pool-selector.yml@yaml-templates
      parameters:
        agentPoolPR: $(PRBuildPool)
        agentPoolPRUrl: $(PRBuildPoolUrl)
        agentPoolCI: $(CIBuildPool)
        agentPoolCIUrl: $(CIBuildPoolUrl)

# This job builds the macOS tests.
#
# - configure: Get the labels from gihub and populate the output.
# - AgentPoolSelector: If the build was not manually triggered to use a specific pool, this job is used to decide if the build is using a 
#                      private pool or a public one.
- job: build_macos_tests_job
  dependsOn:
  - ${{ if eq(parameters.pool, 'automatic') }}:
    - AgentPoolSelector
  - configure
  displayName: 'Build macOS tests'
  timeoutInMinutes: 120
  variables:
    DOTNET_PLATFORMS: $[ dependencies.configure.outputs['configure_platforms.DOTNET_PLATFORMS'] ]
    ENABLE_DOTNET: $[ dependencies.configure.outputs['configure_platforms.ENABLE_DOTNET'] ]
    INCLUDE_XAMARIN_LEGACY: $[ dependencies.configure.outputs['configure_platforms.INCLUDE_XAMARIN_LEGACY'] ]
    ${{ if eq(parameters.pool, 'automatic') }}:
      AgentPoolComputed: $[ dependencies.AgentPoolSelector.outputs['setAgentPool.AgentPoolComputed'] ]
    ${{ if eq(parameters.pool, 'ci') }}:
      AgentPoolComputed: $(CIBuildPool)
    ${{ if eq(parameters.pool, 'pr') }}:
      AgentPoolComputed: $(PRBuildPool)
    # add all the variables that have been parsed by the configuration step. Could we have a less verbose way??
    # old and ugly env var use by jenkins, we do have parts of the code that use it, contains the PR number
    PR_ID: $[ dependencies.configure.outputs['labels.pr_number'] ]
    # set the branch variable name, this is required by jenkins and we have a lot of scripts that depend on it
    BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
    RUN_MAC_TESTS: $[ dependencies.configure.outputs['decisions.RUN_MAC_TESTS'] ]
  condition: ne(dependencies.configure.outputs['decisions.RUN_MAC_TESTS'],'')
  pool:
    name: $(AgentPoolComputed)
    demands:
    - Agent.OS -equals Darwin
    - macOS.Name -equals ${{ parameters.macOSName }}
    - XcodeChannel -equals ${{ parameters.xcodeChannel }}
  workspace:
    clean: all

  steps:
  - template: build-mac-tests.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}
      vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
      keyringPass: ${{ parameters.keyringPass }}
      gitHubToken: ${{ parameters.gitHubToken }}
      xqaCertPass: ${{ parameters.xqaCertPass }}
      enableDotnet: ${{ parameters.enableDotnet }}
