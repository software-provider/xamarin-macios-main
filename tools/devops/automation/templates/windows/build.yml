parameters:

- name: statusContext
  type: string 
  default: 'Windows Integration Tests'

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- pwsh: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/show_env.ps1
  displayName: 'Dump Environment'

- task: DownloadPipelineArtifact@2
  displayName: Download artifacts
  inputs:
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts

- pwsh: |
    Get-ChildItem $(Build.SourcesDirectory)/artifacts -Recurse 
  displayName: "Debug downloads"

- pwsh: |
    try {
      Write-Host "Looking in '$(Build.SourcesDirectory)\artifacts"
      Get-ChildItem "$(Build.SourcesDirectory)\artifacts" -Recurse
    } catch {
      Write-Host "Exception occured: $_"
    }
  displayName: 'List downloaded artifacts'
  continueOnError: true

- task: UseDotNet@2
  inputs:
    version: 7.0.102

- pwsh: |
    & dotnet --version
    & dotnet --info
    & dotnet workload list
    # We don't care if anything went wrong here.
    exit 0
  displayName: 'Show .NET info'
  continueOnError: true

# This task fixes errors such as these:
#     error MSB4242: SDK Resolver Failure: "The SDK resolver "NuGetSdkResolver" failed while attempting to resolve the SDK "Microsoft.Build.NoTargets/3.3.0". Exception: "NuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'D:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages'.
- pwsh: |
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occured: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\" -Name "Shared" -ItemType "directory"
    } catch {
      Write-Host "Exception occured: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\Shared\" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occured: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occured: $_"
    }
  displayName: 'Create directories for NuGet'
  continueOnError: true

- pwsh: |
    & dotnet build "$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/Windows/InstallDotNet.csproj" `
    --verbosity quiet `
    "-bl:$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/Windows/install.binlog" `
    -p:DisableImplicitNuGetFallbackFolder=true
  displayName: 'Install custom .NET'

- pwsh: |
    $Env:DOTNET = "$(Build.SourcesDirectory)\xamarin-macios\tests\dotnet\Windows\bin\dotnet\dotnet.exe"
    & dotnet build "$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/Windows/InstallDotNet.csproj" `
      --verbosity quiet `
      "-bl:$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/Windows/install-workloads.binlog" `
      -p:DisableImplicitNuGetFallbackFolder=true `
      -t:Install
  displayName: 'Install workloads'

# get and expand the needed libs for monotouch
- task: DownloadPipelineArtifact@2
  displayName: Download test libraries dependencies
  inputs:
    patterns: '**/package-test-libraries.zip'
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts/tmp

# this step replaces the test-libraries dir
- pwsh: |
    $zip = "$(Build.SourcesDirectory)/artifacts/tmp/${{ parameters.uploadPrefix }}package-test-libraries/package-test-libraries.zip"
    $target = "$(Build.SourcesDirectory)/xamarin-macios"
    Expand-Archive -Force $zip -DestinationPath $target
    Get-ChildItem "$target" -Recurse
  workingDirectory: $(Build.SourcesDirectory)/xamarin-macios
  displayName: Expand test libraries.
  timeoutInMinutes: 10

- pwsh: |
    & $(Build.SourcesDirectory)\xamarin-macios\tests\dotnet\Windows\bin\dotnet\dotnet.exe `
        nuget push `
        "$(Build.SourcesDirectory)\xamarin-macios\tests\test-libraries\nugets\FrameworksInRuntimesNativeDirectory\bin\Debug\Xamarin.Tests.FrameworksInRuntimesNativeDirectory.1.0.0.nupkg" `
        --source "$(Build.SourcesDirectory)\xamarin-macios\tests\.nuget\packages"
  displayName: 'Build dependencies for .NET tests'
  continueOnError: true

- pwsh: |
    $Env:DOTNET = "$(Build.SourcesDirectory)\xamarin-macios\tests\dotnet\Windows\bin\dotnet\dotnet.exe"
    & $(Build.SourcesDirectory)\xamarin-macios\tests\dotnet\Windows\bin\dotnet\dotnet.exe `
        test `
        "$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/UnitTests/DotNetUnitTests.csproj" `
        --filter Category=Windows `
        --verbosity quiet `
        "--results-directory:$(Build.SourcesDirectory)/xamarin-macios/jenkins-results/" `
        "--logger:console;verbosity=detailed" `
        "--logger:trx;LogFileName=$(Build.SourcesDirectory)/xamarin-macios/jenkins-results/windows-dotnet-tests.trx" `
        "--logger:html;LogFileName=$(Build.SourcesDirectory)/xamarin-macios/jenkins-results/windows-dotnet-tests.html" `
        "-bl:$(Build.SourcesDirectory)/xamarin-macios/tests/dotnet/Windows/run-dotnet-tests.binlog"
  displayName: 'Run .NET tests'

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: '$(Build.SourcesDirectory)/xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: '${{ parameters.uploadPrefix }}HtmlReport-windows-integration-$(System.JobAttempt)'
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    Write-Host "Run windows tests."
    Write-Host "Mac agent to be used:"
    Write-Host "Mac agent pool: $Env:MAC_AGENT_POOL"
    Write-Host "Mac agent name: $Env:MAC_AGENT_NAME"
    Write-Host "Mac agent IP: $Env:MAC_AGENT_IP"
  displayName: Run tests

# Upload all the binlogs
# Copy all the binlogs to a separate directory, keeping directory structure.
- pwsh: |
    $sourceDir = '$(Build.SourcesDirectory)\xamarin-macios'
    $targetDir = '$(Build.ArtifactStagingDirectory)\windows-binlogs'
    New-Item -Path "$targetDir" -ItemType "directory" -Force

    $binlogs = Get-ChildItem $sourceDir -Recurse -Include "*.binlog"
    foreach ($binlog in $binlogs) {
        $targetFile = $targetDir + $binlog.FullName.SubString($sourceDir.Length);
        New-Item -ItemType File -Path $targetFile -Force
        Copy-Item $binlog.FullName -destination $targetFile
    }
  displayName: Copy all binlogs
  continueOnError: true
  condition: succeededOrFailed()

# Publish all the binlogs we collected in the previous step
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: Windows binlogs'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/windows-binlogs
    artifactName: windows-binlogs-test-$(Build.BuildId)-$(System.JobAttempt)
  continueOnError: true
  condition: succeededOrFailed()

# Make sure to report any errors
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $githubComments = New-GitHubCommentsObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token) -Hash $Env:COMMENT_HASH
    $statuses = New-GitHubStatusesObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token)

    if (Test-Path -Path "$Env:GITHUB_FAILURE_COMMENT_FILE" -PathType Leaf)  {
      $statuses.SetStatus("error", "${{ parameters.statusContext }} failed.", "${{ parameters.statusContext }}")
      $githubComments.NewCommentFromFile("${{ parameters.statusContext }} failed", ":x:", "$Env:GITHUB_FAILURE_COMMENT_FILE")
    } elseif ("$($Env:AGENT_JOBSTATUS)" -ne "Succeeded") {
      $statuses.SetStatus("error", "${{ parameters.statusContext }} failed.", "${{ parameters.statusContext }}")
      $message = ":x: $($Env:AGENT_JOBSTATUS) :x:"
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} failed", ":x:", $message)
    } else {
      $statuses.SetStatus("success", "${{ parameters.statusContext }} passed.", "${{ parameters.statusContext }}")
      $message = ":white_check_mark: **All** ${{ parameters.statusContext }} passed."
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} passed", ":computer:", $message)
    }
  displayName: 'Report results to GitHub'
  timeoutInMinutes: 5
  condition: always() # in particular we care if something failed, but let's always run just in case
  continueOnError: true
  env:
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    TEST_BOT: $(Agent.Name)
    ${{ if eq(parameters.repositoryAlias, 'self') }}:
      COMMENT_HASH: $(fix_commit.GIT_HASH)
    ${{ else }}:
      COMMENT_HASH: $(Build.SourceVersion)

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $vsts = New-VSTS -Org "devdiv" -Project "DevDiv" -Token $(MacPoolAccessToken)

    # get the pool and the agent objects and disable the bot
    $pool = $vsts.Pools.GetPool("$Env:MAC_AGENT_POOL")
    $agent = $vsts.Agents.GetAgent($pool, $Env:MAC_AGENT_NAME)
    $vsts.Agents.SetEnabled($pool, $agent, $True)
  displayName: 'Re-enabled macOS bot from pool'
  condition: always()
