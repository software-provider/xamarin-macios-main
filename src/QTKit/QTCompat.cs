// autogenerated stub - do not edit
#if !NET
using System;

#pragma warning disable 0067

namespace QTKit {

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureConnection : Foundation.NSObject {
		public Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public void SetAttribute (Foundation.NSObject attribute, System.String key)
		{
		}

		public QTCaptureConnection ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureConnection (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureConnection (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual Foundation.NSObject GetAttribute (Foundation.NSString attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsAttributeReadOnly (System.String attributeKey)
		{
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject attribute, Foundation.NSString key)
		{
		}

		public QTKit.QTMediaType MediaTypeValue {
			get { return default (QTKit.QTMediaType); }
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSDictionary ConnectionAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual System.Boolean Enabled {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual QTKit.QTFormatDescription FormatDescription {
			get { return default (QTKit.QTFormatDescription); }
		}

		public virtual System.String MediaType {
			get { return default (System.String); }
		}

		public virtual Foundation.NSObject Owner {
			get { return default (Foundation.NSObject); }
		}

		public static Foundation.NSString AttributeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AttributeWillChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AudioAveragePowerLevelsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AudioMasterVolumeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AudioPeakHoldLevelsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AudioVolumesAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChangedAttributeKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EnabledAudioChannelsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FormatDescriptionDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FormatDescriptionWillChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static class Notifications : System.Object {
			public static Foundation.NSObject ObserveAttributeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDevice : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable {
		public static QTKit.QTCaptureDevice [] GetInputDevices (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTCaptureDevice []);
		}

		public static QTKit.QTCaptureDevice GetDefaultInputDevice (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTCaptureDevice);
		}

		public System.Boolean HasMediaType (QTKit.QTMediaType mediaType)
		{
			return default (System.Boolean);
		}

		public QTCaptureDevice (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDevice (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDevice (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void Close ()
		{
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		public static QTKit.QTCaptureDevice FromUniqueID (System.String deviceUniqueID)
		{
			return default (QTKit.QTCaptureDevice);
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsAttributeReadOnly (System.String attributeKey)
		{
			return default (System.Boolean);
		}

		public virtual System.Boolean Open (out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject attribute, System.String attributeKey)
		{
		}

		internal QTCaptureDevice ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public System.Boolean IsAvcTransportControlReadOnly {
			get { return default (System.Boolean); }
		}

		public QTKit.QTCaptureDeviceTransportControl AvcTransportControl {
			get { return default (QTKit.QTCaptureDeviceTransportControl); }
			set { }
		}

		public System.Boolean IsSuspended {
			get { return default (System.Boolean); }
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSDictionary DeviceAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual QTKit.QTFormatDescription [] FormatDescriptions {
			get { return default (QTKit.QTFormatDescription []); }
		}

		public static QTKit.QTCaptureDevice [] InputDevices {
			get { return default (QTKit.QTCaptureDevice []); }
		}

		public virtual System.Boolean IsConnected {
			get { return default (System.Boolean); }
		}

		public virtual System.Boolean IsInUseByAnotherApplication {
			get { return default (System.Boolean); }
		}

		public virtual System.Boolean IsOpen {
			get { return default (System.Boolean); }
		}

		public virtual System.String LocalizedDisplayName {
			get { return default (System.String); }
		}

		public virtual System.String ModelUniqueID {
			get { return default (System.String); }
		}

		public virtual System.String UniqueID {
			get { return default (System.String); }
		}

		public static Foundation.NSString AVCTransportControlsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AVCTransportControlsPlaybackModeKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AVCTransportControlsSpeedKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AttributeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AttributeWillChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AvailableInputSourcesAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChangedAttributeKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FormatDescriptionsDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FormatDescriptionsWillChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString InputSourceIdentifierAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString InputSourceIdentifierKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString InputSourceLocalizedDisplayNameKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LegacySequenceGrabberAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LinkedDevicesAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString SuspendedAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString WasConnectedNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString WasDisconnectedNotification {
			get { return default (Foundation.NSString); }
		}

		public static class Notifications : System.Object {
			public static Foundation.NSObject ObserveAttributeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveAttributeWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionsDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionsDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionsWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveFormatDescriptionsWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveWasConnected (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveWasConnected (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveWasDisconnected (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveWasDisconnected (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDeviceTransportControl : System.Object {
		public QTCaptureDeviceTransportControl ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureDeviceControlsSpeed? Speed {
			get { return default (System.Nullable<QTKit.QTCaptureDeviceControlsSpeed>); }
			set { }
		}

		public QTKit.QTCaptureDevicePlaybackMode? PlaybackMode {
			get { return default (System.Nullable<QTKit.QTCaptureDevicePlaybackMode>); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCompressionOptions : Foundation.NSObject {
		public System.String [] GetCompressionOptionsIdentifiers (QTKit.QTMediaType forMediaType)
		{
			return default (System.String []);
		}

		public QTCompressionOptions ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCompressionOptions (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCompressionOptions (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public static Foundation.NSObject FromIdentifier (System.String identifier)
		{
			return default (Foundation.NSObject);
		}

		public static System.String [] GetCompressionOptionsIdentifiers (System.String forMediaType)
		{
			return default (System.String []);
		}

		public virtual System.Boolean IsEqualToCompressionOptions (QTKit.QTCompressionOptions compressionOptions)
		{
			return default (System.Boolean);
		}

		public QTKit.QTMediaType MediaTypeValue {
			get { return default (QTKit.QTMediaType); }
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.String LocalizedCompressionOptionsSummary {
			get { return default (System.String); }
		}

		public virtual System.String LocalizedDisplayName {
			get { return default (System.String); }
		}

		public virtual System.String MediaType {
			get { return default (System.String); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTFormatDescription : Foundation.NSObject {
		public QTFormatDescription ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTFormatDescription (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTFormatDescription (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual Foundation.NSObject AttributeForKey (System.String key)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsEqualToFormatDescription (QTKit.QTFormatDescription formatDescription)
		{
			return default (System.Boolean);
		}

		public QTKit.QTMediaType MediaTypeValue {
			get { return default (QTKit.QTMediaType); }
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSDictionary FormatDescriptionAttributes {
			get { return default (Foundation.NSDictionary); }
		}

		public virtual System.UInt32 FormatType {
			get { return default (System.UInt32); }
		}

		public virtual System.String LocalizedFormatSummary {
			get { return default (System.String); }
		}

		public virtual System.String MediaType {
			get { return default (System.String); }
		}

		public virtual Foundation.NSData QuickTimeSampleDescription {
			get { return default (Foundation.NSData); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMedia : Foundation.NSObject {
		public QTMedia ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMedia (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMedia (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual System.IntPtr Conditions (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		public System.IntPtr Constructors (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		public static Foundation.NSObject FromQuickTimeMedia (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (Foundation.NSObject);
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean HasCharacteristic (System.String characteristic)
		{
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSDictionary MediaAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual System.IntPtr QuickTimeMedia {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTTrack Track {
			get { return default (QTKit.QTTrack); }
		}

		public static Foundation.NSString CharacteristicAudio {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicCanSendVideo {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicCanStep {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicHasNoDuration {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicHasSkinData {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicHasVideoFrameRate {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicNonLinear {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicProvidesActions {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicProvidesKeyFocus {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CharacteristicVisual {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CreationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DurationAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ModificationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString QualityAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString SampleCountAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TimeScaleAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TypeAttribute {
			get { return default (Foundation.NSString); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTCodecQuality : System.Int32 {
		Lossless = 1024,
		Max = 1023,
		Min = 0,
		Low = 256,
		Normal = 512,
		High = 768,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTImageAttributes : System.Object {
		public QTImageAttributes ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public Foundation.NSDictionary ToDictionary ()
		{
			return default (Foundation.NSDictionary);
		}

		public System.String CodecType {
			get { return default (System.String); }
			set { }
		}

		public QTKit.QTCodecQuality? Quality {
			get { return default (System.Nullable<QTKit.QTCodecQuality>); }
			set { }
		}

		public System.Int32? TimeScale {
			get { return default (System.Nullable<System.Int32>); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieSaveOptions : System.Object {
		public QTMovieSaveOptions ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public Foundation.NSDictionary ToDictionary ()
		{
			return default (Foundation.NSDictionary);
		}

		public System.Boolean Flatten {
			get { return default (System.Boolean); }
			set { }
		}

		public QTKit.QTFileType? ExportType {
			get { return default (System.Nullable<QTKit.QTFileType>); }
			set { }
		}

		public Foundation.NSData ExportSettings {
			get { return default (Foundation.NSData); }
			set { }
		}

		public System.Int32? ManufacturerCode {
			get { return default (System.Nullable<System.Int32>); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTTrack : Foundation.NSObject {
		public void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, QTKit.QTImageAttributes attributes)
		{
		}

		public QTTrack ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTTrack (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTTrack (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTTrack (System.IntPtr quicktimeTrack, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, Foundation.NSDictionary attributes)
		{
		}

		public virtual CoreGraphics.CGSize ApertureModeDimensionsForMode (System.String mode)
		{
			return default (CoreGraphics.CGSize);
		}

		public virtual void DeleteSegment (QTKit.QTTimeRange segment)
		{
		}

		public static Foundation.NSObject FromQuickTimeTrack (System.IntPtr quicktimeTrack, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (Foundation.NSObject);
		}

		public virtual void GenerateApertureModeDimensions ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual void InsertEmptySegment (QTKit.QTTimeRange range)
		{
		}

		public virtual void InsertSegmentOfTrack (QTKit.QTTrack track, QTKit.QTTimeRange timeRange, QTKit.QTTime atTime)
		{
		}

		public virtual void InsertSegmentOfTrack (QTKit.QTTrack track, QTKit.QTTimeRange fromRange, QTKit.QTTimeRange scaledToRange)
		{
		}

		public virtual void RemoveApertureModeDimensions ()
		{
		}

		public virtual void ScaleSegmentnewDuration (QTKit.QTTimeRange segment, QTKit.QTTime newDuration)
		{
		}

		public virtual void SetApertureModeDimensionsforMode (CoreGraphics.CGSize dimensions, System.String mode)
		{
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.Boolean Enabled {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual QTKit.QTMedia Media {
			get { return default (QTKit.QTMedia); }
		}

		public virtual QTKit.QTMovie Movie {
			get { return default (QTKit.QTMovie); }
		}

		public virtual System.IntPtr QuickTimeTrack {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSDictionary TrackAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual System.Single Volume {
			get { return default (System.Single); }
			set { }
		}

		public static Foundation.NSString BoundsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CreationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DimensionsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DisplayNameAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EnabledAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FormatSummaryAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString HasApertureModeDimensionsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IDAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IsChapterTrackAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LayerAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString MediaTypeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ModificationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RangeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TimeScaleAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString UsageInMovieAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString UsageInPosterAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString UsageInPreviewAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString VolumeAttribute {
			get { return default (Foundation.NSString); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovie : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable, Foundation.INSCopying {
		public System.Boolean SaveTo (System.String fileName, QTKit.QTMovieSaveOptions options, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public System.Boolean SaveTo (System.String fileName, QTKit.QTMovieSaveOptions options)
		{
			return default (System.Boolean);
		}

		public void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, QTKit.QTImageAttributes attributes)
		{
		}

		public QTKit.QTTrack [] TracksOfMediaType (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTTrack []);
		}

		public QTMovie ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovie (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovie (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (System.String fileName, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSUrl url, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTDataReference dataReference, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (AppKit.NSPasteboard pasteboard, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSData data, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTMovie movie, QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSMutableData data, out Foundation.NSError error)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void AddImage (AppKit.NSImage image, QTKit.QTTime duration, Foundation.NSDictionary attributes)
		{
		}

		public virtual void AppendSelectionFromMovie (QTKit.QTMovie movie)
		{
		}

		public virtual System.Boolean AttachToCurrentThread ()
		{
			return default (System.Boolean);
		}

		public virtual void Autoplay ()
		{
		}

		public static System.Boolean CanInitWithFile (System.String fileName)
		{
			return default (System.Boolean);
		}

		public static System.Boolean CanInitWithPasteboard (AppKit.NSPasteboard pasteboard)
		{
			return default (System.Boolean);
		}

		public static System.Boolean CanInitWithUrl (Foundation.NSUrl url)
		{
			return default (System.Boolean);
		}

		public virtual nint ChapterIndexForTime (QTKit.QTTime time)
		{
			return default (nint);
		}

		public virtual Foundation.NSDictionary [] Chapters ()
		{
			return default (Foundation.NSDictionary []);
		}

		public virtual Foundation.NSObject Copy (Foundation.NSZone zone)
		{
			return default (Foundation.NSObject);
		}

		public virtual void DeleteSegment (QTKit.QTTimeRange segment)
		{
		}

		public virtual System.Boolean DetachFromCurrentThread ()
		{
			return default (System.Boolean);
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		public static void EnterQTKitOnThread ()
		{
		}

		public static void EnterQTKitOnThreadDisablingThreadSafetyProtection ()
		{
		}

		public static void ExitQTKitOnThread ()
		{
		}

		public virtual AppKit.NSImage FrameImageAtTime (QTKit.QTTime time)
		{
			return default (AppKit.NSImage);
		}

		public virtual System.IntPtr FrameImageAtTime (QTKit.QTTime time, Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		public static QTKit.QTMovie FromAttributes (Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public static QTKit.QTMovie FromData (Foundation.NSData data, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public static QTKit.QTMovie FromFile (System.String fileName, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public static QTKit.QTMovie FromMovieNamed (System.String name, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public static QTKit.QTMovie FromPasteboard (AppKit.NSPasteboard pasteboard, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public static QTKit.QTMovie FromUrl (Foundation.NSUrl url, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public virtual void GenerateApertureModeDimensions ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual void GotoBeginning ()
		{
		}

		public virtual void GotoEnd ()
		{
		}

		public virtual void GotoNextSelectionPoint ()
		{
		}

		public virtual void GotoPosterTime ()
		{
		}

		public virtual void GotoPreviousSelectionPoint ()
		{
		}

		public virtual void InsertEmptySegmentAt (QTKit.QTTimeRange range)
		{
		}

		public virtual void InsertSegmentOfMovieFromRange (QTKit.QTMovie movie, QTKit.QTTimeRange srcRange, QTKit.QTTimeRange dstRange)
		{
		}

		public virtual void InsertSegmentOfMovieTimeRange (QTKit.QTMovie movie, QTKit.QTTimeRange range, QTKit.QTTime time)
		{
		}

		public virtual QTKit.QTTrack InsertSegmentOfTrackFromRange (QTKit.QTTrack track, QTKit.QTTimeRange srcRange, QTKit.QTTimeRange dstRange)
		{
			return default (QTKit.QTTrack);
		}

		public virtual QTKit.QTTrack InsertSegmentOfTrackTimeRange (QTKit.QTTrack track, QTKit.QTTimeRange range, QTKit.QTTime time)
		{
			return default (QTKit.QTTrack);
		}

		public virtual void Invalidate ()
		{
		}

		public static System.String [] MovieFileTypes (QTKit.QTMovieFileTypeOptions types)
		{
			return default (System.String []);
		}

		public virtual Foundation.NSData MovieFormatRepresentation ()
		{
			return default (Foundation.NSData);
		}

		public static System.String [] MovieTypesWithOptions (QTKit.QTMovieFileTypeOptions types)
		{
			return default (System.String []);
		}

		public static System.String [] MovieUnfilteredFileTypes ()
		{
			return default (System.String []);
		}

		public static System.String [] MovieUnfilteredPasteboardTypes ()
		{
			return default (System.String []);
		}

		public QTKit.QTMovie MovieWithTimeRange (QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public virtual void Play ()
		{
		}

		public virtual void RemoveApertureModeDimensions ()
		{
		}

		public virtual System.Boolean RemoveChapters ()
		{
			return default (System.Boolean);
		}

		public virtual void RemoveTrack (QTKit.QTTrack track)
		{
		}

		public virtual void ReplaceSelectionWithSelectionFromMovie (QTKit.QTMovie movie)
		{
		}

		public virtual System.Boolean SaveTo (System.String fileName, Foundation.NSDictionary attributes)
		{
			return default (System.Boolean);
		}

		public virtual System.Boolean SaveTo (System.String fileName, Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void ScaleSegmentNewDuration (QTKit.QTTimeRange segment, QTKit.QTTime newDuration)
		{
		}

		public virtual QTKit.QTTime SelectionDuration ()
		{
			return default (QTKit.QTTime);
		}

		public virtual QTKit.QTTime SelectionEnd ()
		{
			return default (QTKit.QTTime);
		}

		public virtual QTKit.QTTime SelectionStart ()
		{
			return default (QTKit.QTTime);
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public virtual void SetSelection (QTKit.QTTimeRange selection)
		{
		}

		public virtual QTKit.QTTime StartTimeOfChapter (nint chapterIndex)
		{
			return default (QTKit.QTTime);
		}

		public virtual void StepBackward ()
		{
		}

		public virtual void StepForward ()
		{
		}

		public virtual void Stop ()
		{
		}

		public virtual QTKit.QTTrack [] TracksOfMediaType (System.String type)
		{
			return default (QTKit.QTTrack []);
		}

		public virtual System.Boolean UpdateMovieFile ()
		{
			return default (System.Boolean);
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.Boolean CanUpdateMovieFile {
			get { return default (System.Boolean); }
		}

		public virtual nint ChapterCount {
			get { return default (nint); }
		}

		public virtual AppKit.NSImage CurrentFrameImage {
			get { return default (AppKit.NSImage); }
		}

		public virtual QTKit.QTTime CurrentTime {
			get { return default (QTKit.QTTime); }
			set { }
		}

		public virtual QTKit.QTTime Duration {
			get { return default (QTKit.QTTime); }
		}

		public virtual System.Boolean HasChapters {
			get { return default (System.Boolean); }
		}

		public virtual System.Boolean Idling {
			get { return default (System.Boolean); }
		}

		public static QTKit.QTMovie Movie {
			get { return default (QTKit.QTMovie); }
		}

		public virtual Foundation.NSDictionary MovieAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual System.Boolean Muted {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual AppKit.NSImage PosterImage {
			get { return default (AppKit.NSImage); }
		}

		public virtual System.Single Rate {
			get { return default (System.Single); }
			set { }
		}

		public virtual QTKit.QTTrack [] Tracks {
			get { return default (QTKit.QTTrack []); }
		}

		public virtual System.Single Volume {
			get { return default (System.Single); }
			set { }
		}

		public virtual Foundation.NSObject WeakDelegate {
			get { return default (Foundation.NSObject); }
			set { }
		}

		public static Foundation.NSString ActiveSegmentAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeClassic {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeClean {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeEncodedPixels {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ApertureModeProduction {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AskUnresolvedDataRefsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString AutoAlternatesAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChapterDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChapterListDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChapterName {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChapterStartTime {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ChapterTargetTrackAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CloseWindowRequestNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CopyrightAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CreationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CurrentSizeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CurrentTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DataAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DataReferenceAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DataSizeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DelegateAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DidEndNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DisplayNameAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DontInteractWithUserAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString DurationAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EditabilityDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EditableAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EditedNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString EnterFullScreenRequestNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ExitFullScreenRequestNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FileNameAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FileOffsetAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageDeinterlaceFields {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageHighQuality {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageOpenGLContext {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImagePixelFormat {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageRepresentationsType {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageSingleField {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageSize {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageType {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageTypeCGImageRef {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageTypeCIImage {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageTypeCVOpenGLTextureRef {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageTypeCVPixelBufferRef {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FrameImageTypeNSImage {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString HasApertureModeDimensionsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString HasAudioAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString HasDurationAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString HasVideoAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IsActiveAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IsInteractiveAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IsLinearAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString IsSteppableAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LoadStateAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LoadStateDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LoopModeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LoopsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString LoopsBackAndForthAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString MessageNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString MessageStringPostedNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ModificationTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString MutedAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString NaturalSizeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString OpenAsyncOKAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PasteboardAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PasteboardType {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PlaysAllFramesAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PlaysSelectionOnlyAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PosterTimeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PreferredMutedAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PreferredRateAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PreferredVolumeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PreviewModeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString PreviewRangeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RateAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RateChangesPreservePitchAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RateDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RateDidChangeNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ResolveDataRefsAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString SelectionAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString SelectionDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString SizeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString StatusCodeNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString StatusFlagsNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString StatusStringNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString StatusStringPostedNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TargetIDNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TargetNameNotificationParameter {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TimeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString TimeScaleAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString URLAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString UneditableException {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString VolumeAttribute {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString VolumeDidChangeNotification {
			get { return default (Foundation.NSString); }
		}

		public static class Notifications : System.Object {
			public static Foundation.NSObject ObserveApertureModeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveApertureModeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveChapterDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveChapterDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveChapterListDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveChapterListDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveCloseWindowRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveCloseWindowRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveDidEnd (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveDidEnd (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEditabilityDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEditabilityDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEdited (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEdited (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEnterFullScreenRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveEnterFullScreenRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveExitFullScreenRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveExitFullScreenRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveLoadStateDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveLoadStateDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveLoopModeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveLoopModeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveMessageStringPosted (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveMessageStringPosted (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveRateDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveRateDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveSelectionDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveSelectionDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveSizeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveSizeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveStatusStringPosted (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveStatusStringPosted (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveTimeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveTimeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveVolumeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveVolumeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public struct QTTime {
		public static readonly QTKit.QTTime Zero;

		public static readonly QTKit.QTTime IndefiniteTime;

		public QTTime (System.Int64 timeValue, nint timeScale, QTKit.TimeFlags flags)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTTime (System.Int64 timeValue, nint timeScale)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.String ToString ()
		{
			return default (System.String);
		}

		public System.Int64 TimeValue {
			get { return default (System.Int64); }
			set { }
		}

		public nint TimeScale {
			get { return default (nint); }
			set { }
		}

		public QTKit.TimeFlags Flags {
			get { return default (QTKit.TimeFlags); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public struct QTTimeRange {
		public QTTimeRange (QTKit.QTTime time, QTKit.QTTime duration)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.String ToString ()
		{
			return default (System.String);
		}

		public QTKit.QTTime Time {
			get { return default (QTKit.QTTime); }
			set { }
		}

		public QTKit.QTTime Duration {
			get { return default (QTKit.QTTime); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[System.Flags]
	public enum TimeFlags : System.Int32 {
		TimeIsIndefinite = 1,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[System.Flags]
	public enum QTMovieFileTypeOptions : System.UInt32 {
		StillImageTypes = 1,
		TranslatableTypes = 2,
		AggressiveTypes = 4,
		DynamicTypes = 8,
		CommonTypes = 0,
		AllTypes = 65535,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]
	public enum QTCaptureDevicePlaybackMode : System.UInt64 {
		NotPlaying = 0,
		Playing = 1,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]
	public enum QTCaptureDeviceControlsSpeed : System.Int64 {
		FastestReverse = -19000,
		VeryFastReverse = -16000,
		FastReverse = -13000,
		NormalReverse = -10000,
		SlowReverse = -7000,
		VerySlowReverse = -4000,
		SlowestReverse = -1000,
		Stopped = 0,
		SlowestForward = 1000,
		VerySlowForward = 4000,
		SlowForward = 7000,
		NormalForward = 10000,
		FastForward = 13000,
		VeryFastForward = 16000,
		FastestForward = 19000,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]
	public enum QTCaptureDestination : System.UInt64 {
		NewFile = 1,
		OldFile = 2,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]
	public enum QTError : System.Int64 {
		Unknown = -1,
		None = 0,
		IncompatibleInput = 1002,
		IncompatibleOutput = 1003,
		InvalidInputsOrOutputs = 1100,
		DeviceAlreadyUsedbyAnotherSession = 1101,
		NoDataCaptured = 1200,
		SessionConfigurationChanged = 1201,
		DiskFull = 1202,
		DeviceWasDisconnected = 1203,
		MediaChanged = 1204,
		MaximumDurationReached = 1205,
		MaximumFileSizeReached = 1206,
		MediaDiscontinuity = 1207,
		MaximumNumberOfSamplesForFileFormatReached = 1208,
		DeviceNotConnected = 1300,
		DeviceInUseByAnotherApplication = 1301,
		DeviceExcludedByAnotherDevice = 1302,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTMediaType : System.Int32 {
		Video = 0,
		Sound = 1,
		Text = 2,
		Base = 3,
		Mpeg = 4,
		Music = 5,
		TimeCode = 6,
		Sprite = 7,
		Flash = 8,
		Movie = 9,
		Tween = 10,
		Type3D = 11,
		Skin = 12,
		Qtvr = 13,
		Hint = 14,
		Stream = 15,
		Muxed = 16,
		QuartzComposer = 17,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTFileType : System.Int32 {
		AIFF = 1095321158,
		AIFC = 1095321155,
		DVC = 1685480225,
		MIDI = 1298752617,
		Picture = 1346978644,
		Movie = 1299148630,
		Text = 1413830740,
		Wave = 1463899717,
		SystemSevenSound = 1936091500,
		MuLaw = 1431060823,
		AVI = 1449547552,
		SoundDesignerII = 1399075430,
		AudioCDTrack = 1953653099,
		PICS = 1346978643,
		GIF = 1195984486,
		PNG = 1347307366,
		TIFF = 1414088262,
		PhotoShop = 943870035,
		SGIImage = 777209673,
		BMP = 1112363110,
		JPEG = 1246774599,
		JFIF = 1246774599,
		MacPaint = 1347310663,
		TargaImage = 1414547779,
		QuickDrawGXPicture = 1902405496,
		QuickTimeImage = 1903454566,
		T3DMF = 860114246,
		FLC = 1179403040,
		Flash = 1398228556,
		FlashPix = 1179675000,
		MP4 = 1836082996,
		PDF = 1346651680,
		T3GPP = 862417008,
		AMR = 1634562592,
		SDV = 1935963680,
		T3GP2 = 862416946,
		AMC = 1634558752,
		JPEG2000 = 1785737760,
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureAudioPreviewOutput : QTKit.QTCaptureOutput {
		public QTCaptureAudioPreviewOutput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureAudioPreviewOutput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureAudioPreviewOutput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.String OutputDeviceUniqueID {
			get { return default (System.String); }
			set { }
		}

		public virtual System.Single Volume {
			get { return default (System.Single); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDecompressedVideoOutput : QTKit.QTCaptureOutput {
		public QTCaptureDecompressedVideoOutput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDecompressedVideoOutput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDecompressedVideoOutput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void OutputVideoFrame (CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.Boolean AutomaticallyDropsLateVideoFrames {
			get { return default (System.Boolean); }
			set { }
		}

		public QTKit.IQTCaptureDecompressedVideoOutputDelegate Delegate {
			get { return default (QTKit.IQTCaptureDecompressedVideoOutputDelegate); }
			set { }
		}

		public virtual System.Double MinimumVideoFrameInterval {
			get { return default (System.Double); }
			set { }
		}

		public virtual Foundation.NSDictionary PixelBufferAttributes {
			get { return default (Foundation.NSDictionary); }
			set { }
		}

		public virtual Foundation.NSObject WeakDelegate {
			get { return default (Foundation.NSObject); }
			set { }
		}

		public event System.EventHandler<QTKit.QTCaptureVideoDroppedEventArgs> DidDropVideoFrame;

		public event System.EventHandler<QTKit.QTCaptureVideoFrameEventArgs> DidOutputVideoFrame;

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureVideoDroppedEventArgs : System.EventArgs {
		public QTCaptureVideoDroppedEventArgs (QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureVideoDroppedEventArgs ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection {
			get { return default (QTKit.QTCaptureConnection); }
			set { }
		}

		public QTKit.QTSampleBuffer SampleBuffer {
			get { return default (QTKit.QTSampleBuffer); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureVideoFrameEventArgs : System.EventArgs {
		public QTCaptureVideoFrameEventArgs (CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureVideoFrameEventArgs ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection {
			get { return default (QTKit.QTCaptureConnection); }
			set { }
		}

		public QTKit.QTSampleBuffer SampleBuffer {
			get { return default (QTKit.QTSampleBuffer); }
			set { }
		}

		public CoreVideo.CVImageBuffer VideoFrame {
			get { return default (CoreVideo.CVImageBuffer); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureDecompressedVideoOutputDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureDecompressedVideoOutputDelegate_Extensions : System.Object {
		public static void DidOutputVideoFrame (this QTKit.IQTCaptureDecompressedVideoOutputDelegate This, QTKit.QTCaptureOutput captureOutput, CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public static void DidDropVideoFrame (this QTKit.IQTCaptureDecompressedVideoOutputDelegate This, QTKit.QTCaptureOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDecompressedVideoOutputDelegate : Foundation.NSObject, QTKit.IQTCaptureDecompressedVideoOutputDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureDecompressedVideoOutputDelegate ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDecompressedVideoOutputDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDecompressedVideoOutputDelegate (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DidDropVideoFrame (QTKit.QTCaptureOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public virtual void DidOutputVideoFrame (QTKit.QTCaptureOutput captureOutput, CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDeviceInput : QTKit.QTCaptureInput {
		protected QTCaptureDeviceInput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDeviceInput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureDeviceInput (QTKit.QTCaptureDevice device)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public static QTKit.QTCaptureDeviceInput FromDevice (QTKit.QTCaptureDevice device)
		{
			return default (QTKit.QTCaptureDeviceInput);
		}

		internal QTCaptureDeviceInput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureDevice Device {
			get { return default (QTKit.QTCaptureDevice); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileOutput : QTKit.QTCaptureOutput {
		protected QTCaptureFileOutput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureFileOutput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual QTKit.QTCompressionOptions GetCompressionOptions (QTKit.QTCaptureConnection forConnection)
		{
			return default (QTKit.QTCompressionOptions);
		}

		public virtual void PauseRecording ()
		{
		}

		public virtual void RecordToOutputFile (Foundation.NSUrl url)
		{
		}

		public virtual void RecordToOutputFile (Foundation.NSUrl url, QTKit.QTCaptureDestination bufferDestination)
		{
		}

		public virtual void ResumeRecording ()
		{
		}

		public virtual void SetCompressionOptions (QTKit.QTCompressionOptions compressionOptions, QTKit.QTCaptureConnection forConnection)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		internal QTCaptureFileOutput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public QTKit.IQTCaptureFileOutputDelegate Delegate {
			get { return default (QTKit.IQTCaptureFileOutputDelegate); }
			set { }
		}

		public virtual System.Boolean IsRecordingPaused {
			get { return default (System.Boolean); }
		}

		public virtual QTKit.QTTime MaximumRecordedDuration {
			get { return default (QTKit.QTTime); }
			set { }
		}

		public virtual System.UInt64 MaximumRecordedFileSize {
			get { return default (System.UInt64); }
			set { }
		}

		public virtual CoreGraphics.CGSize MaximumVideoSize {
			get { return default (CoreGraphics.CGSize); }
			set { }
		}

		public virtual System.Double MinimumVideoFrameInterval {
			get { return default (System.Double); }
			set { }
		}

		public virtual Foundation.NSUrl OutputFileUrl {
			get { return default (Foundation.NSUrl); }
		}

		public virtual QTKit.QTTime RecordedDuration {
			get { return default (QTKit.QTTime); }
		}

		public virtual System.UInt64 RecordedFileSize {
			get { return default (System.UInt64); }
		}

		public virtual Foundation.NSObject WeakDelegate {
			get { return default (Foundation.NSObject); }
			set { }
		}

		public QTKit.QTCaptureFileError ShouldChangeOutputFile {
			get { return default (QTKit.QTCaptureFileError); }
			set { }
		}

		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> DidFinishRecording;

		public event System.EventHandler<QTKit.QTCaptureFileSampleEventArgs> DidOutputSampleBuffer;

		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidPauseRecording;

		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidResumeRecording;

		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidStartRecording;

		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> MustChangeOutputFile;

		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> WillFinishRecording;

		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> WillStartRecording;

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileErrorEventArgs : System.EventArgs {
		public QTCaptureFileErrorEventArgs (Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileErrorEventArgs ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection [] Connections {
			get { return default (QTKit.QTCaptureConnection []); }
			set { }
		}

		public Foundation.NSUrl OutputFileURL {
			get { return default (Foundation.NSUrl); }
			set { }
		}

		public Foundation.NSError Reason {
			get { return default (Foundation.NSError); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileSampleEventArgs : System.EventArgs {
		public QTCaptureFileSampleEventArgs (QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileSampleEventArgs ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection {
			get { return default (QTKit.QTCaptureConnection); }
			set { }
		}

		public QTKit.QTSampleBuffer SampleBuffer {
			get { return default (QTKit.QTSampleBuffer); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileUrlEventArgs : System.EventArgs {
		public QTCaptureFileUrlEventArgs (Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileUrlEventArgs ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection [] Connections {
			get { return default (QTKit.QTCaptureConnection []); }
			set { }
		}

		public Foundation.NSUrl FileUrl {
			get { return default (Foundation.NSUrl); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureFileOutputDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureFileOutputDelegate_Extensions : System.Object {
		public static void DidOutputSampleBuffer (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public static void WillStartRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public static void DidStartRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public static System.Boolean ShouldChangeOutputFile (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
			return default (System.Boolean);
		}

		public static void MustChangeOutputFile (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public static void WillFinishRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public static void DidFinishRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public static void DidPauseRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public static void DidResumeRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileOutputDelegate : Foundation.NSObject, QTKit.IQTCaptureFileOutputDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureFileOutputDelegate ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureFileOutputDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureFileOutputDelegate (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DidFinishRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public virtual void DidOutputSampleBuffer (QTKit.QTCaptureFileOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public virtual void DidPauseRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public virtual void DidResumeRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public virtual void DidStartRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

		public virtual void MustChangeOutputFile (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public virtual System.Boolean ShouldChangeOutputFile (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
			return default (System.Boolean);
		}

		public virtual void WillFinishRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason)
		{
		}

		public virtual void WillStartRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection [] connections)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureInput : Foundation.NSObject {
		protected QTCaptureInput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureInput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureInput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureConnection [] Connections {
			get { return default (QTKit.QTCaptureConnection []); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureLayer : CoreAnimation.CALayer {
		public QTCaptureLayer ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureLayer (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureLayer (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureLayer (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureLayer (QTKit.QTCaptureSession session)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public static Foundation.NSObject FromSession (QTKit.QTCaptureSession session)
		{
			return default (Foundation.NSObject);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureSession Session {
			get { return default (QTKit.QTCaptureSession); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureMovieFileOutput : QTKit.QTCaptureFileOutput {
		public QTCaptureMovieFileOutput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureMovieFileOutput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureMovieFileOutput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureOutput : Foundation.NSObject {
		protected QTCaptureOutput (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureOutput (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureOutput ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureConnection [] Connections {
			get { return default (QTKit.QTCaptureConnection []); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureSession : Foundation.NSObject {
		public QTCaptureSession ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureSession (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureSession (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual System.Boolean AddInput (QTKit.QTCaptureInput input, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual System.Boolean AddOutput (QTKit.QTCaptureOutput output, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void RemoveInput (QTKit.QTCaptureInput input)
		{
		}

		public virtual void RemoveOutput (QTKit.QTCaptureOutput output)
		{
		}

		public virtual void StartRunning ()
		{
		}

		public virtual void StopRunning ()
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureInput [] Inputs {
			get { return default (QTKit.QTCaptureInput []); }
		}

		public virtual System.Boolean IsRunning {
			get { return default (System.Boolean); }
		}

		public virtual QTKit.QTCaptureOutput [] Outputs {
			get { return default (QTKit.QTCaptureOutput []); }
		}

		public static Foundation.NSString ErrorKey {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RuntimeErrorNotification {
			get { return default (Foundation.NSString); }
		}

		public static class Notifications : System.Object {
			public static Foundation.NSObject ObserveRuntimeError (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			public static Foundation.NSObject ObserveRuntimeError (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureView : AppKit.NSView {
		public QTCaptureView ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureView (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureView (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureView (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureView (CoreGraphics.CGRect frameRect)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTCaptureConnection [] AvailableVideoPreviewConnections {
			get { return default (QTKit.QTCaptureConnection []); }
		}

		public virtual QTKit.QTCaptureSession CaptureSession {
			get { return default (QTKit.QTCaptureSession); }
			set { }
		}

		public QTKit.IQTCaptureViewDelegate Delegate {
			get { return default (QTKit.IQTCaptureViewDelegate); }
			set { }
		}

		public virtual AppKit.NSColor FillColor {
			get { return default (AppKit.NSColor); }
			set { }
		}

		public virtual System.Boolean PreservesAspectRatio {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual CoreGraphics.CGRect PreviewBounds {
			get { return default (CoreGraphics.CGRect); }
		}

		public virtual QTKit.QTCaptureConnection VideoPreviewConnection {
			get { return default (QTKit.QTCaptureConnection); }
			set { }
		}

		public virtual Foundation.NSObject WeakDelegate {
			get { return default (Foundation.NSObject); }
			set { }
		}

		public QTKit.QTCaptureImageEvent WillDisplayImage {
			get { return default (QTKit.QTCaptureImageEvent); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureViewDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureViewDelegate_Extensions : System.Object {
		public static CoreImage.CIImage WillDisplayImage (this QTKit.IQTCaptureViewDelegate This, QTKit.QTCaptureView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureViewDelegate : Foundation.NSObject, QTKit.IQTCaptureViewDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureViewDelegate ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureViewDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureViewDelegate (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual CoreImage.CIImage WillDisplayImage (QTKit.QTCaptureView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTDataReference : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable {
		public QTDataReference ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTDataReference (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTDataReference (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTDataReference (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		public static Foundation.NSObject FromDataRefData (Foundation.NSData dataRefData, System.String type)
		{
			return default (Foundation.NSObject);
		}

		public static Foundation.NSObject FromDataReference (Foundation.NSData data)
		{
			return default (Foundation.NSObject);
		}

		public static Foundation.NSObject FromReference (System.String fileName)
		{
			return default (Foundation.NSObject);
		}

		public static Foundation.NSObject FromReference (Foundation.NSUrl url)
		{
			return default (Foundation.NSObject);
		}

		public static Foundation.NSObject FromReference (Foundation.NSData data, System.String name, System.String mimeType)
		{
			return default (Foundation.NSObject);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual Foundation.NSData DataRefData {
			get { return default (Foundation.NSData); }
		}

		public virtual System.String DataRefType {
			get { return default (System.String); }
			set { }
		}

		public virtual System.String MimeType {
			get { return default (System.String); }
		}

		public virtual System.String Name {
			get { return default (System.String); }
		}

		public virtual Foundation.NSData ReferenceData {
			get { return default (Foundation.NSData); }
		}

		public virtual System.String ReferenceFile {
			get { return default (System.String); }
		}

		public virtual Foundation.NSUrl ReferenceUrl {
			get { return default (Foundation.NSUrl); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTErrorKey : System.Object {
		public static Foundation.NSString CaptureInput {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString CaptureOutput {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString Device {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString Domain {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString ExcludingDevice {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString FileSize {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString RecordingSuccesfullyFinished {
			get { return default (Foundation.NSString); }
		}

		public static Foundation.NSString Time {
			get { return default (Foundation.NSString); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieLayer : CoreAnimation.CALayer {
		public QTMovieLayer ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieLayer (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieLayer (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieLayer (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieLayer (QTKit.QTMovie movie)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public static QTKit.QTMovieLayer FromMovie (QTKit.QTMovie movie)
		{
			return default (QTKit.QTMovieLayer);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTMovie Movie {
			get { return default (QTKit.QTMovie); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieView : AppKit.NSView {
		public QTMovieView ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieView (Foundation.NSCoder coder)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieView (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieView (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieView (CoreGraphics.CGRect frameRect)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void Add (Foundation.NSObject sender)
		{
		}

		public virtual void AddScaled (Foundation.NSObject sender)
		{
		}

		public virtual void Copy (Foundation.NSObject sender)
		{
		}

		public virtual void Cut (Foundation.NSObject sender)
		{
		}

		public virtual void Delete (Foundation.NSObject sender)
		{
		}

		public virtual void GotoBeginning (Foundation.NSObject sender)
		{
		}

		public virtual void GotoEnd (Foundation.NSObject sender)
		{
		}

		public virtual void GotoNextSelectionPoint (Foundation.NSObject sender)
		{
		}

		public virtual void GotoPosterFrame (Foundation.NSObject sender)
		{
		}

		public virtual void GotoPreviousSelectionPoint (Foundation.NSObject sender)
		{
		}

		public virtual void Paste (Foundation.NSObject sender)
		{
		}

		public virtual void Pause (Foundation.NSObject sender)
		{
		}

		public virtual void Play (Foundation.NSObject sender)
		{
		}

		public virtual void Replace (Foundation.NSObject sender)
		{
		}

		public virtual void SelectAll (Foundation.NSObject sender)
		{
		}

		public virtual void SelectNone (Foundation.NSObject sender)
		{
		}

		public virtual void SetShowsResizeIndicator (System.Boolean show)
		{
		}

		public virtual void StepBackward (Foundation.NSObject sender)
		{
		}

		public virtual void StepForward (Foundation.NSObject sender)
		{
		}

		public virtual void Trim (Foundation.NSObject sender)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.Boolean BackButtonVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual System.Single ControllerBarHeight {
			get { return default (System.Single); }
		}

		public virtual System.Boolean CustomButtonVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public QTKit.IQTMovieViewDelegate Delegate {
			get { return default (QTKit.IQTMovieViewDelegate); }
			set { }
		}

		public virtual System.Boolean Editable {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual AppKit.NSColor FillColor {
			get { return default (AppKit.NSColor); }
			set { }
		}

		public virtual System.Boolean HotSpotButtonVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual System.Boolean IsControllerVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual QTKit.QTMovie Movie {
			get { return default (QTKit.QTMovie); }
			set { }
		}

		public virtual CoreGraphics.CGRect MovieBounds {
			get { return default (CoreGraphics.CGRect); }
		}

		public virtual CoreGraphics.CGRect MovieControllerBounds {
			get { return default (CoreGraphics.CGRect); }
		}

		public virtual System.Boolean PreservesAspectRatio {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual System.Boolean SetStepButtonsVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual System.Boolean TranslateButtonVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual System.Boolean VolumeButtonVisible {
			get { return default (System.Boolean); }
			set { }
		}

		public virtual Foundation.NSObject WeakDelegate {
			get { return default (Foundation.NSObject); }
			set { }
		}

		public virtual System.Boolean ZoomButtonsVisible {
			get { return default (System.Boolean); }
			set { }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTMovieViewDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTMovieViewDelegate_Extensions : System.Object {
		public static CoreImage.CIImage ViewWillDisplayImage (this QTKit.IQTMovieViewDelegate This, QTKit.QTMovieView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieViewDelegate : Foundation.NSObject, QTKit.IQTMovieViewDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTMovieViewDelegate ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieViewDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieViewDelegate (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual CoreImage.CIImage ViewWillDisplayImage (QTKit.QTMovieView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTSampleBuffer : Foundation.NSObject {
		protected QTSampleBuffer (Foundation.NSObjectFlag t)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTSampleBuffer (System.IntPtr handle)
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DecrementSampleUseCount ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String key)
		{
			return default (Foundation.NSObject);
		}

		public virtual void IncrementSampleUseCount ()
		{
		}

		internal QTSampleBuffer ()
		{
			throw new System.PlatformNotSupportedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle {
			get { return default (System.IntPtr); }
		}

		public virtual System.IntPtr BytesForAllSamples {
			get { return default (System.IntPtr); }
		}

		public virtual QTKit.QTTime DecodeTime {
			get { return default (QTKit.QTTime); }
		}

		public virtual QTKit.QTTime Duration {
			get { return default (QTKit.QTTime); }
		}

		public virtual QTKit.QTFormatDescription FormatDescription {
			get { return default (QTKit.QTFormatDescription); }
		}

		public virtual nuint LengthForAllSamples {
			get { return default (nuint); }
		}

		public virtual QTKit.QTTime PresentationTime {
			get { return default (QTKit.QTTime); }
		}

		public virtual Foundation.NSDictionary SampleBufferAttributes {
			get { return default (Foundation.NSDictionary); }
		}

		public virtual nint SampleCount {
			get { return default (nint); }
		}

		public virtual nint SampleUseCount {
			get { return default (nint); }
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public delegate System.Boolean QTCaptureFileError (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection [] connections, Foundation.NSError reason);

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10, 15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public delegate CoreImage.CIImage QTCaptureImageEvent (QTKit.QTCaptureView view, CoreImage.CIImage image);

}

#endif // !NET
